# -*- coding: utf-8 -*-
"""Diabetics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bm2d75P4Any2PQZKgAoD0832N7BlomeX

imoprting the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and the analysis
PIMA Diabetics Dataset
"""

#loading the dataset diabetics to a pandas dataframe
diabetics_dataset=pd.read_csv('/content/diabetes.csv')

"""Printing the first five dataset of the diabetics"""

diabetics_dataset.head()

"""#gathering numbers of row and columns from the dataset

"""

diabetics_dataset.shape

#getting the stastistical measures of the data
diabetics_dataset.describe()

"""number of people who have diabetices and who doesnt have

"""

diabetics_dataset['Outcome'].value_counts()

diabetics_dataset.groupby('Outcome').mean()

#separating data and labels
X=diabetics_dataset.drop(columns='Outcome',axis=1)
Y=diabetics_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

scaler=StandardScaler()

scaler.fit(X)

standardized_data=scaler.transform(X)

print(standardized_data)

X=standardized_data
Y=diabetics_dataset['Outcome']

print(X)

print(Y)

#Train Test Split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.4,stratify=Y,random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the model"""

classifier=svm.SVC(kernel='linear')

#training the support vector machine classifier
classifier.fit(X_train, Y_train)

"""Model Evaluation
Accuracy Score
"""

#accuracy score on the taining data
X_train_predection=classifier.predict(X_train)
training_data_accuracy=accuracy_score(X_train_predection, Y_train)

print('Accuracy score of the traning data:',training_data_accuracy)

#accuracy score on the taining data
X_test_predection=classifier.predict(X_test)
training_data_accuracy=accuracy_score(X_test_predection, Y_test)

print('the accuracy score on the test data:',training_data_accuracy)

"""Making a predective system"""

input_data=(4,110,92,0,0,37.6,0.191,30)
input_data_as_numpy_array=np.asarray(input_data)
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
std_data=scaler.transform(input_data_reshaped)
print(std_data)
predection=classifier.predict(std_data)
print(predection)
if(predection[0]==0):
  print("The Person is not diabetic")
else:
  print("The person is diabetic")